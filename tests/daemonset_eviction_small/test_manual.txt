Testing circle on with cluster 
Create cluster:
For this test create  cluster with 2 nodes , each with 3,75 RAM and 1 CPU
gcloud container clusters create testspace
kubectl config view
kubectl config use-context gke_closercriticalhop_us-central1-a_tesg1
kubectl config use-context  gke_closercriticalhop_us-central1-a_testspace
kubectl config set-context --current --namespace=default

Cluster configuration should be stored in folder “deployment.yaml” in  cd ./tests/daemonset_eviction_small/ and run cd ./tests/daemonset_eviction_small/
After that perform test:

Test:
kubectl apply -f ./deployment.yaml  --cluster=gke_closercriticalhop_us-central1-a_testspace
sleep 10
kubectl get deployments --cluster=gke_closercriticalhop_us-central1-a_testspace
mkdir ./cluster_dump 
kubectl get po -o yaml > ./cluster_dump/pods.yaml  --cluster=gke_closercriticalhop_us-central1-a_testspace
kubectl get no -o yaml > ./cluster_dump/nodes.yaml --cluster=gke_closercriticalhop_us-central1-a_testspace
kubectl get services -o yaml > ./cluster_dump/service.yaml  --cluster=gke_closercriticalhop_us-central1-a_testspace
kubectl get priorityclass -o yaml > ./cluster_dump/priorityclass.yaml  --cluster=gke_closercriticalhop_us-central1-a_testspace
kubectl val -d ./cluster_dump/ -f ./daemonset_create.yaml   


Clean up:
kubectl delete deployment redis-master redis-master-2  redis-slave redis-slave-unlimit-norequest redis-slave-unlimit-norequest-2  redis-master-evict --cluster=gke_closercriticalhop_us-central1-a_testspace
kubectl delete priorityclass name = high-priority
kubectl delete daemonset fluentd-elasticsearch --cluster=gke_closercriticalhop_us-central1-a_testspace
rm -R ./cluster_dump/
sleep 10
kubectl get pods --cluster=gke_closercriticalhop_us-central1-a_testspace
# Make sure: No resources found.

Run daemonset
kubectl apply -f ./daemonset_create.yaml  --cluster gke_closercriticalhop_us-central1-a_testspace
